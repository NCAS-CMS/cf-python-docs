
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "recipes/plot_11_recipe.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_recipes_plot_11_recipe.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_recipes_plot_11_recipe.py:


Plotting the Warming Stripes
============================

In this recipe, we will plot the `Warming Stripes (Climate Stripes)
<https://en.wikipedia.org/wiki/Warming_stripes>`_ created by
Professor Ed Hawkins at NCAS, University of Reading. Here we will use the
ensemble mean of the
`HadCRUT.5.0.1.0 analysis gridded data
<https://www.metoffice.gov.uk/hadobs/hadcrut5/data/current/download.html>`_ for
the same.

.. GENERATED FROM PYTHON SOURCE LINES 16-17

1. Import cf-python and matplotlib.pyplot:

.. GENERATED FROM PYTHON SOURCE LINES 17-22

.. code-block:: python


    import matplotlib.pyplot as plt

    import cf








.. GENERATED FROM PYTHON SOURCE LINES 23-24

2. Read the field constructs:

.. GENERATED FROM PYTHON SOURCE LINES 24-29

.. code-block:: python

    temperature_data = cf.read(
        "~/recipes/HadCRUT.5.0.1.0.analysis.anomalies.ensemble_mean.nc"
    )[0]
    print(temperature_data)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Field: long_name=blended air_temperature_anomaly over land with sea_water_temperature_anomaly (ncvar%tas_mean)
    --------------------------------------------------------------------------------------------------------------
    Data            : long_name=blended air_temperature_anomaly over land with sea_water_temperature_anomaly(time(2074), latitude(36), longitude(72)) K
    Cell methods    : area: mean (interval: 5.0 degrees_north) time(2074): mean (interval: 1 month) realization(1): mean
    Dimension coords: time(2074) = [1850-01-16 12:00:00, ..., 2022-10-16 12:00:00] gregorian
                    : latitude(36) = [-87.5, ..., 87.5] degrees_north
                    : longitude(72) = [-177.5, ..., 177.5] degrees_east
                    : realization(1) = [100] 1




.. GENERATED FROM PYTHON SOURCE LINES 30-33

3. Calculate the annual mean temperature anomalies. The ``'weights=True'``
argument is used to take the varying lengths of months into account which
ensures that the calculated mean is more accurate:

.. GENERATED FROM PYTHON SOURCE LINES 33-37

.. code-block:: python

    annual_temperature = temperature_data.collapse(
        "T: mean", weights=True, group=cf.Y()
    )








.. GENERATED FROM PYTHON SOURCE LINES 38-39

4. Select the data from 1850 to 2022:

.. GENERATED FROM PYTHON SOURCE LINES 39-41

.. code-block:: python

    period = annual_temperature.subspace(T=cf.year(cf.wi(1850, 2022)))








.. GENERATED FROM PYTHON SOURCE LINES 42-43

5. Calculate the global average temperature for each year:

.. GENERATED FROM PYTHON SOURCE LINES 43-45

.. code-block:: python

    global_temperature = period.collapse("X: Y: mean")








.. GENERATED FROM PYTHON SOURCE LINES 46-47

6. Get the global average temperature and squeeze it to remove the size 1 axis:

.. GENERATED FROM PYTHON SOURCE LINES 47-49

.. code-block:: python

    global_avg_temp = global_temperature.array.squeeze()








.. GENERATED FROM PYTHON SOURCE LINES 50-52

7. Create a normalization function that maps the interval from the minimum to
the maximum temperature to the interval [0, 1] for colouring:

.. GENERATED FROM PYTHON SOURCE LINES 52-54

.. code-block:: python

    norm_global = plt.Normalize(global_avg_temp.min(), global_avg_temp.max())








.. GENERATED FROM PYTHON SOURCE LINES 55-56

8. Set the colormap instance:

.. GENERATED FROM PYTHON SOURCE LINES 56-58

.. code-block:: python

    cmap = plt.get_cmap("RdBu_r")








.. GENERATED FROM PYTHON SOURCE LINES 59-61

9. Create the figure and the axes for the global plot. Loop over the selected
years, plot a colored vertical stripe for each and remove the axes:

.. GENERATED FROM PYTHON SOURCE LINES 61-72

.. code-block:: python

    fig_global, ax_global = plt.subplots(figsize=(10, 2))

    for i in range(global_avg_temp.shape[0]):
        ax_global.axvspan(
            xmin=i - 0.5, xmax=i + 0.5, color=cmap(norm_global(global_avg_temp[i]))
        )

    ax_global.axis("off")

    plt.show()




.. image-sg:: /recipes/images/sphx_glr_plot_11_recipe_001.png
   :alt: plot 11 recipe
   :srcset: /recipes/images/sphx_glr_plot_11_recipe_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 73-76

10. For the regional warming stripes, steps 5 to 9 are repeated for the
specific region. Here, we define the bounding box for UK by subspacing over
a domain spanning 49.9 to 59.4 degrees north and -10.5 to 1.8 degrees east:

.. GENERATED FROM PYTHON SOURCE LINES 76-81

.. code-block:: python

    uk_temperature = period.subspace(X=cf.wi(-10.5, 1.8), Y=cf.wi(49.9, 59.4))
    uk_avg_temperature = uk_temperature.collapse("X: Y: mean")
    uk_avg_temp = uk_avg_temperature.array.squeeze()
    norm_uk = plt.Normalize(uk_avg_temp.min(), uk_avg_temp.max())








.. GENERATED FROM PYTHON SOURCE LINES 82-93

.. code-block:: python


    fig_uk, ax_uk = plt.subplots(figsize=(10, 2))

    for i in range(uk_avg_temp.shape[0]):
        ax_uk.axvspan(
            xmin=i - 0.5, xmax=i + 0.5, color=cmap(norm_uk(uk_avg_temp[i]))
        )

    ax_uk.axis("off")

    plt.show()



.. image-sg:: /recipes/images/sphx_glr_plot_11_recipe_002.png
   :alt: plot 11 recipe
   :srcset: /recipes/images/sphx_glr_plot_11_recipe_002.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  21.115 seconds)


.. _sphx_glr_download_recipes_plot_11_recipe.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_11_recipe.py <plot_11_recipe.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_11_recipe.ipynb <plot_11_recipe.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
